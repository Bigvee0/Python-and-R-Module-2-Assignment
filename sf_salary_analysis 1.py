{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import os\n",
    "import zipfile\n",
    "import sys\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 1: Import Data\n",
    "try:\n",
    "    df = pd.read_csv('Total.csv')\n",
    "    print('Dataset loaded successfully.')\n",
    "    print(f'This Dataset contains {df.shape[0]} Rows and {df.shape[1]} Columns')\n",
    "except FileNotFoundError:\n",
    "    print('Error: Total.csv file not found. Please ensure the file is in the correct directory.')\n",
    "    sys.exit(1)\n",
    "except Exception as e:\n",
    "    print(f'Error loading dataset: {str(e)}')\n",
    "    sys.exit(1)\n",
    "\n",
    "# Convert relevant columns to numeric, handling errors\n",
    "series_list = ['BasePay', 'OvertimePay', 'OtherPay', 'Benefits']\n",
    "for series in series_list:\n",
    "    df[series] = pd.to_numeric(df[series], errors='coerce')\n",
    "\n",
    "# Display basic information\n",
    "df.info()\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 2: Create Employee Function\n",
    "def get_employee_details(employee_name, dataframe):\n",
    "    \"\"\"Retrieve details for a given employee name.\"\"\"\n",
    "    try:\n",
    "        # Case-insensitive search for employee name\n",
    "        result = dataframe[dataframe['EmployeeName'].str.lower() == employee_name.lower()]\n",
    "        if result.empty:\n",
    "            raise ValueError(f'No employee found with name: {employee_name}')\n",
    "        return result\n",
    "    except AttributeError:\n",
    "        print('Error: Invalid data format in DataFrame.')\n",
    "        return None\n",
    "    except Exception as e:\n",
    "        print(f'Error retrieving employee details: {str(e)}')\n",
    "        return None\n",
    "\n",
    "# Example usage\n",
    "employee_name = 'NATHANIEL FORD'\n",
    "details = get_employee_details(employee_name, df)\n",
    "if details is not None:\n",
    "    print(f'Details for {employee_name}:')\n",
    "    print(details)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 3: Data Processing with Dictionary\n",
    "try:\n",
    "    # Convert DataFrame to dictionary for processing\n",
    "    salary_dict = df.to_dict(orient='records')\n",
    "    print(f'Converted DataFrame to dictionary with {len(salary_dict)} records.')\n",
    "\n",
    "    # Example: Calculate average TotalPay by Year\n",
    "    year_pay = {}\n",
    "    for record in salary_dict:\n",
    "        year = record['Year']\n",
    "        total_pay = record['TotalPay']\n",
    "        if year not in year_pay:\n",
    "            year_pay[year] = {'sum': 0, 'count': 0}\n",
    "        year_pay[year]['sum'] += total_pay\n",
    "        year_pay[year]['count'] += 1\n",
    "\n",
    "    # Compute averages\n",
    "    average_pay_by_year = {year: data['sum'] / data['count'] for year, data in year_pay.items()}\n",
    "    print('Average TotalPay by Year:')\n",
    "    for year, avg in average_pay_by_year.items():\n",
    "        print(f'Year {year}: ${avg:.2f}')\n",
    "except Exception as e:\n",
    "    print(f'Error processing data with dictionary: {str(e)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 4: Error Handling is implemented throughout the code\n",
    "# - FileNotFoundError for data import\n",
    "# - ValueError for invalid employee names\n",
    "# - AttributeError for invalid DataFrame format\n",
    "# - General Exception for unexpected errors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 5: Export Employee Details to CSV and Zip\n",
    "def export_employee_to_zip(employee_name, dataframe, output_dir='Employee Profile'):\n",
    "    \"\"\"Export employee details to CSV and zip it.\"\"\"\n",
    "    try:\n",
    "        # Get employee details\n",
    "        details = get_employee_details(employee_name, dataframe)\n",
    "        if details is None:\n",
    "            raise ValueError('No employee details to export.')\n",
    "\n",
    "        # Create output directory if it doesn't exist\n",
    "        os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "        # Save to CSV\n",
    "        csv_path = os.path.join(output_dir, f'{employee_name.replace(\" \", \"_\")}_details.csv')\n",
    "        details.to_csv(csv_path, index=False)\n",
    "        print(f'Employee details saved to {csv_path}')\n",
    "\n",
    "        # Create zip file\n",
    "        zip_path = 'Employee_Profile.zip'\n",
    "        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n",
    "            zipf.write(csv_path, os.path.join(output_dir, os.path.basename(csv_path)))\n",
    "        print(f'Zipped employee details to {zip_path}')\n",
    "    except Exception as e:\n",
    "        print(f'Error exporting employee details: {str(e)}')\n",
    "\n",
    "# Example usage\n",
    "export_employee_to_zip('NATHANIEL FORD', df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Task 6: R Script to Unzip and Display Data\n",
    "# Save this as a separate R script file (e.g., unzip_display.R)\n",
    "r_script = '''\n",
    "# R script to unzip and display employee data\n",
    "library(readr)\n",
    "\n",
    "# Unzip the Employee Profile folder\n",
    "zip_file <- 'Employee_Profile.zip'\n",
    "unzip(zip_file, exdir = 'Employee_Profile_Unzipped')\n",
    "\n",
    "# Read and display the CSV file\n",
    "csv_files <- list.files(path = 'Employee_Profile_Unzipped/Employee Profile', pattern = '\\\\.csv$', full.names = TRUE)\n",
    "if (length(csv_files) > 0) {\n",
    "  employee_data <- read_csv(csv_files[1])\n",
    "  print('Employee Data:')\n",
    "  print(employee_data)\n",
    "} else {\n",
    "  print('No CSV files found in the unzipped folder.')\n",
    "}\n",
    "'''\n",
    "\n",
    "# Save R script to file\n",
    "try:\n",
    "    with open('unzip_display.R', 'w') as f:\n",
    "        f.write(r_script)\n",
    "    print('R script saved to unzip_display.R')\n",
    "except Exception as e:\n",
    "    print(f'Error saving R script: {str(e)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualization: Plot distribution of TotalPay and BasePay\n",
    "try:\n",
    "    plt.figure(figsize=(10, 6))\n",
    "    sns.kdeplot(df['TotalPay'], label='TotalPay')\n",
    "    sns.kdeplot(df['BasePay'], label='BasePay')\n",
    "    plt.title('Distribution of TotalPay and BasePay')\n",
    "    plt.xlabel('Pay')\n",
    "    plt.ylabel('Density')\n",
    "    plt.legend()\n",
    "